<?php

/**
 * ExternalHTML Loader
 * ===================
 *
 * Given an HTML URL, this module will pull it, and let you output it. This module
 * will also cache feeds that you retrieve with it.
 *
 *
 * More Details
 * ------------
 *
 * This module loads the given page and can than output all its contents.
 *
 * Example #1: Using the predefined rendering
 * ------------------------------------------
 *
 * $html = $modules->get("ExternalHTML");
 * echo $html->render("https://murb.nl");
 *
 *
 * Example #2: Specifying options and using entry array titles
 * -----------------------------------------------------------
 *
 * $html = $modules->get("ExternalHTML");
 * $html->cache = 0;
 *
 * echo $html->render("https://murb.nl");
 *
 * Options:
 * --------
 *
 * Options should be set before calling load() or render().
 *
 * // render only the body's contents (default = true)
 * $html->onlyBody = true;
 *
 * // render only a fragment by selecting an parent element by id,
 * // it overrides the onlyBody parameter (default = '')
 * $html->fragmentId = "main";
 *
 * // set the feed to cache for an hour (default = 1800 seconds)
 * // if you want to disable the cache, set it to 0.
 * $html->cache = 3600;
 *
 * // tell it to strip out any HTML tags (default = false)
 * $html->stripTags = false;
 *
 * // tell it to encode any entities in the feed (default = false);
 * $html->encodeEntities = false;
 *
 * Note that cleaning and fragmenting of the data is done before caching,
 * hence when building, make sure you disable cache.
 *
 * Handling Errors
 * ---------------
 *
 * The $html->error property always contains a detailed
 * description of what error occurred:
 *
 * if($html->error) { echo "<p>{$html->error}</p>"; }
 *
 * I recommend only checking for or reporting errors when you are
 * developing and testing. On production sites you should skip
 * error checking/testing, as blank output is a clear indication
 * of an error. This module will not throw runtime exceptions so
 * if an error occurs, it's not going to halt the site.
 *
 *
 * Based on the RSS/Atom plugin by Ryan Cramer.
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ExternalHTML extends WireData implements Module {

    public static function getModuleInfo() {
        return array(
            'title' => 'Load an HTML page',
            'summary' => 'Given an URL, this module will pull it, cache it, and let you render it.',
            'version' => 100,
            'permanent' => false,
            'singular' => false,
            'autoload' => false,
            );
    }

    /**
     * Configurable options provided by this module
     *
     */
    protected $options = array(
        'onlyBody' => true,
        'fragmentId' => '',
        'cache' => 1800,             // Number of seconds to cache, or 0 to skip caching (default = 30 minutes)
        'stripTags' => false,             // Strip any markup tags that appear in the feed? (default: false)
        'encodeEntities' => false,         // Whether to automatically decode and re-encode the entities for all fields (default: false)

        // when stripTags is on, it will first replace perform these case insensitive replacements:
        'replacements' => array(
            '<br />' => ' ',
            '<br>' => ' ',
            '</p>' => ' ',
            "\n" => ' ',
            "\r" => ' ',
        )
    );


    /**
     * Path where the XML cache file is stored
     *
     */
    protected $cachePath;

    /**
     * Last error that occurred
     *
     */
    protected $error = '';

    public function __construct() {
        $this->cachePath = $this->config->paths->cache . $this->className() . '/';
    }

    /**
     * Define the cache path
     *
     * Should be done here in the construct rather than the init() because init() is not called on install/uninstall
     *
     */
    public function init() {
        $this->items = new WireArray();
        $this->multibyteSupport = function_exists("mb_strlen");
    }

    /**
     * Set a configuration option
     *
     * @param string $key Option name
     * @param string|int $value Option value
     * @return this
     *
     */
    public function set($key, $value) {
        if($key == 'options' && is_array($value)) $this->options = array_merge($this->options, $value);
            else if(array_key_exists($key, $this->options)) $this->options[$key] = $value;
            else return parent::set($key, $value);

        return $this;
    }

    /**
     * Gets a config option or $entries info
     *
     */
    public function get($key) {
        if($key == 'error') return $this->error;

        //  translate common PW-style names to what they would be in the feed
        if($key == 'url') $key == 'link';
            else if($key == 'date') $key = 'updated';
            else if($key == 'body') $key = 'subtitle';

        if(array_key_exists($key, $this->entries)) return $this->entries[$key];
        if(array_key_exists($key, $this->options)) return $this->options[$key];

        return parent::get($key);
    }

    /**
     * Cleans text string
     *
     */
    protected function cleanText($value) {

        if($this->options['onlyBody'] && !$this->options["fragmentId"]) {
            $doc = new DOMDocument();
            $doc->loadHTML($value);
            $bodyNode = $doc->getElementsByTagName("body")[0];
            $value = $doc->saveHTML($bodyNode);
        }

        if($this->options["fragmentId"]) {
            $doc = new DOMDocument();
            $doc->loadHTML($value);
            $bodyNode = $doc->getElementById($this->options["fragmentId"]);
            $value = $doc->saveHTML($bodyNode);
        }

        if($this->options['stripTags']) {
            if(count($this->options['replacements'])) {
                $value = str_ireplace(array_keys($this->options['replacements']), array_values($this->options['replacements']), $value);
            }
            $value = trim(strip_tags($value));
        }


        if($this->options['encodeEntities']) {
            $value = html_entity_decode($value, ENT_QUOTES, "UTF-8");
            $value = htmlentities($value, ENT_QUOTES, "UTF-8");
        }

        return $value;
    }

    /**
     * Load an Atom feed from the given URL
     *
     * @param string $url Full URL to Atom feed (including http://)
     * @return this
     *
     */
    public function load($url) {

        $data = $this->loadData($url);

        return $data;
    }


    /**
     * Load XML data from either the Atom URL or the cache file
     *
     */
    protected function loadData($url) {

        $cacheFile = $this->cachePath . md5($url) . '.xml.cache';

        if(!is_file($cacheFile) || time() - filemtime($cacheFile) > $this->options['cache']) {
            $xmlData = @file_get_contents($url);
            if($xmlData === false) {
                $this->error("Unable to load " . htmlentities($url));
                return false;
            } else if($this->options['cache']) {
                @file_put_contents($cacheFile, $this->cleanText($xmlData), LOCK_EX);
            }
        } else {
            $xmlData = file_get_contents($cacheFile);
            if($xmlData === false) {
                $this->error("Unable to load XML data cache");
                return false;
            }
        }

        return $xmlData;
    }

    /**
     * Render the markup for data retrieved from the Atom feed
     *
     */
    public function render($url = '') {
        if($url) return $this->load($url);
    }

    /**
     * Create a directory where we will store our cache files
     *
     */
    public function ___install() {

        if(ini_get('allow_url_fopen') == "0") {
            throw new WireException("Cannot install '{$this->className}' because it requires PHP's 'allow_url_fopen' which is disabled on your server.");
        }

        $path = $this->cachePath;
        if(!is_dir($path)) {
            if(!mkdir($path)) throw new WireException("Unable to create directory: $path");
            if($this->config->chmodDir) chmod($path, octdec($this->config->chmodDir));
        }
    }

    /**
     * Remove cache files and directory
     *
     */
    public function ___uninstall() {
        $dir = new DirectoryIterator($this->cachePath);
        foreach($dir as $file) {
            if($file->isDir() || $file->isDot()) continue;
            if($file->isFile() && preg_match('/\.html.cache$/', $file->getFilename())) unlink($file->getPathname());
        }
        rmdir($this->cachePath);
    }

    /**
     * Save the error message and send it on to PW
     *
     */
    public function error($text, $flags = 0) {
        $this->error = $text;
        return parent::error($text, $flags);
    }


}


